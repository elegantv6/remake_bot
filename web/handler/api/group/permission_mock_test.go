// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package group

import (
	"context"
	"github.com/maguro-alternative/remake_bot/pkg/line"
	"github.com/maguro-alternative/remake_bot/web/shared/session/model"
	"net/http"
	"sync"
)

// Ensure, that OAuthPermissionMock does implement OAuthPermission.
// If this is not the case, regenerate this file with moq.
var _ OAuthPermission = &OAuthPermissionMock{}

// OAuthPermissionMock is a mock implementation of OAuthPermission.
//
//	func TestSomethingThatUsesOAuthPermission(t *testing.T) {
//
//		// make and configure a mocked OAuthPermission
//		mockedOAuthPermission := &OAuthPermissionMock{
//			CheckLinePermissionFunc: func(ctx context.Context, r *http.Request, guildId string) (line.LineProfile, *model.LineOAuthSession, error) {
//				panic("mock out the CheckLinePermission method")
//			},
//		}
//
//		// use mockedOAuthPermission in code that requires OAuthPermission
//		// and then make assertions.
//
//	}
type OAuthPermissionMock struct {
	// CheckLinePermissionFunc mocks the CheckLinePermission method.
	CheckLinePermissionFunc func(ctx context.Context, r *http.Request, guildId string) (line.LineProfile, *model.LineOAuthSession, error)

	// calls tracks calls to the methods.
	calls struct {
		// CheckLinePermission holds details about calls to the CheckLinePermission method.
		CheckLinePermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *http.Request
			// GuildId is the guildId argument value.
			GuildId string
		}
	}
	lockCheckLinePermission sync.RWMutex
}

// CheckLinePermission calls CheckLinePermissionFunc.
func (mock *OAuthPermissionMock) CheckLinePermission(ctx context.Context, r *http.Request, guildId string) (line.LineProfile, *model.LineOAuthSession, error) {
	if mock.CheckLinePermissionFunc == nil {
		panic("OAuthPermissionMock.CheckLinePermissionFunc: method is nil but OAuthPermission.CheckLinePermission was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		R       *http.Request
		GuildId string
	}{
		Ctx:     ctx,
		R:       r,
		GuildId: guildId,
	}
	mock.lockCheckLinePermission.Lock()
	mock.calls.CheckLinePermission = append(mock.calls.CheckLinePermission, callInfo)
	mock.lockCheckLinePermission.Unlock()
	return mock.CheckLinePermissionFunc(ctx, r, guildId)
}

// CheckLinePermissionCalls gets all the calls that were made to CheckLinePermission.
// Check the length with:
//
//	len(mockedOAuthPermission.CheckLinePermissionCalls())
func (mock *OAuthPermissionMock) CheckLinePermissionCalls() []struct {
	Ctx     context.Context
	R       *http.Request
	GuildId string
} {
	var calls []struct {
		Ctx     context.Context
		R       *http.Request
		GuildId string
	}
	mock.lockCheckLinePermission.RLock()
	calls = mock.calls.CheckLinePermission
	mock.lockCheckLinePermission.RUnlock()
	return calls
}
