// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package permission

import (
	"github.com/bwmarrin/discordgo"
	"sync"
)

// Ensure, that SessionMock does implement Session.
// If this is not the case, regenerate this file with moq.
var _ Session = &SessionMock{}

// SessionMock is a mock implementation of Session.
//
//	func TestSomethingThatUsesSession(t *testing.T) {
//
//		// make and configure a mocked Session
//		mockedSession := &SessionMock{
//			GuildFunc: func(guildID string, options ...discordgo.RequestOption) (*discordgo.Guild, error) {
//				panic("mock out the Guild method")
//			},
//			GuildChannelsFunc: func(guildID string, options ...discordgo.RequestOption) ([]*discordgo.Channel, error) {
//				panic("mock out the GuildChannels method")
//			},
//			GuildMemberFunc: func(guildID string, userID string, options ...discordgo.RequestOption) (*discordgo.Member, error) {
//				panic("mock out the GuildMember method")
//			},
//			GuildRolesFunc: func(guildID string, options ...discordgo.RequestOption) ([]*discordgo.Role, error) {
//				panic("mock out the GuildRoles method")
//			},
//			UserChannelPermissionsFunc: func(userID string, channelID string, fetchOptions ...discordgo.RequestOption) (int64, error) {
//				panic("mock out the UserChannelPermissions method")
//			},
//		}
//
//		// use mockedSession in code that requires Session
//		// and then make assertions.
//
//	}
type SessionMock struct {
	// GuildFunc mocks the Guild method.
	GuildFunc func(guildID string, options ...discordgo.RequestOption) (*discordgo.Guild, error)

	// GuildChannelsFunc mocks the GuildChannels method.
	GuildChannelsFunc func(guildID string, options ...discordgo.RequestOption) ([]*discordgo.Channel, error)

	// GuildMemberFunc mocks the GuildMember method.
	GuildMemberFunc func(guildID string, userID string, options ...discordgo.RequestOption) (*discordgo.Member, error)

	// GuildRolesFunc mocks the GuildRoles method.
	GuildRolesFunc func(guildID string, options ...discordgo.RequestOption) ([]*discordgo.Role, error)

	// UserChannelPermissionsFunc mocks the UserChannelPermissions method.
	UserChannelPermissionsFunc func(userID string, channelID string, fetchOptions ...discordgo.RequestOption) (int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// Guild holds details about calls to the Guild method.
		Guild []struct {
			// GuildID is the guildID argument value.
			GuildID string
			// Options is the options argument value.
			Options []discordgo.RequestOption
		}
		// GuildChannels holds details about calls to the GuildChannels method.
		GuildChannels []struct {
			// GuildID is the guildID argument value.
			GuildID string
			// Options is the options argument value.
			Options []discordgo.RequestOption
		}
		// GuildMember holds details about calls to the GuildMember method.
		GuildMember []struct {
			// GuildID is the guildID argument value.
			GuildID string
			// UserID is the userID argument value.
			UserID string
			// Options is the options argument value.
			Options []discordgo.RequestOption
		}
		// GuildRoles holds details about calls to the GuildRoles method.
		GuildRoles []struct {
			// GuildID is the guildID argument value.
			GuildID string
			// Options is the options argument value.
			Options []discordgo.RequestOption
		}
		// UserChannelPermissions holds details about calls to the UserChannelPermissions method.
		UserChannelPermissions []struct {
			// UserID is the userID argument value.
			UserID string
			// ChannelID is the channelID argument value.
			ChannelID string
			// FetchOptions is the fetchOptions argument value.
			FetchOptions []discordgo.RequestOption
		}
	}
	lockGuild                  sync.RWMutex
	lockGuildChannels          sync.RWMutex
	lockGuildMember            sync.RWMutex
	lockGuildRoles             sync.RWMutex
	lockUserChannelPermissions sync.RWMutex
}

// Guild calls GuildFunc.
func (mock *SessionMock) Guild(guildID string, options ...discordgo.RequestOption) (*discordgo.Guild, error) {
	if mock.GuildFunc == nil {
		panic("SessionMock.GuildFunc: method is nil but Session.Guild was just called")
	}
	callInfo := struct {
		GuildID string
		Options []discordgo.RequestOption
	}{
		GuildID: guildID,
		Options: options,
	}
	mock.lockGuild.Lock()
	mock.calls.Guild = append(mock.calls.Guild, callInfo)
	mock.lockGuild.Unlock()
	return mock.GuildFunc(guildID, options...)
}

// GuildCalls gets all the calls that were made to Guild.
// Check the length with:
//
//	len(mockedSession.GuildCalls())
func (mock *SessionMock) GuildCalls() []struct {
	GuildID string
	Options []discordgo.RequestOption
} {
	var calls []struct {
		GuildID string
		Options []discordgo.RequestOption
	}
	mock.lockGuild.RLock()
	calls = mock.calls.Guild
	mock.lockGuild.RUnlock()
	return calls
}

// GuildChannels calls GuildChannelsFunc.
func (mock *SessionMock) GuildChannels(guildID string, options ...discordgo.RequestOption) ([]*discordgo.Channel, error) {
	if mock.GuildChannelsFunc == nil {
		panic("SessionMock.GuildChannelsFunc: method is nil but Session.GuildChannels was just called")
	}
	callInfo := struct {
		GuildID string
		Options []discordgo.RequestOption
	}{
		GuildID: guildID,
		Options: options,
	}
	mock.lockGuildChannels.Lock()
	mock.calls.GuildChannels = append(mock.calls.GuildChannels, callInfo)
	mock.lockGuildChannels.Unlock()
	return mock.GuildChannelsFunc(guildID, options...)
}

// GuildChannelsCalls gets all the calls that were made to GuildChannels.
// Check the length with:
//
//	len(mockedSession.GuildChannelsCalls())
func (mock *SessionMock) GuildChannelsCalls() []struct {
	GuildID string
	Options []discordgo.RequestOption
} {
	var calls []struct {
		GuildID string
		Options []discordgo.RequestOption
	}
	mock.lockGuildChannels.RLock()
	calls = mock.calls.GuildChannels
	mock.lockGuildChannels.RUnlock()
	return calls
}

// GuildMember calls GuildMemberFunc.
func (mock *SessionMock) GuildMember(guildID string, userID string, options ...discordgo.RequestOption) (*discordgo.Member, error) {
	if mock.GuildMemberFunc == nil {
		panic("SessionMock.GuildMemberFunc: method is nil but Session.GuildMember was just called")
	}
	callInfo := struct {
		GuildID string
		UserID  string
		Options []discordgo.RequestOption
	}{
		GuildID: guildID,
		UserID:  userID,
		Options: options,
	}
	mock.lockGuildMember.Lock()
	mock.calls.GuildMember = append(mock.calls.GuildMember, callInfo)
	mock.lockGuildMember.Unlock()
	return mock.GuildMemberFunc(guildID, userID, options...)
}

// GuildMemberCalls gets all the calls that were made to GuildMember.
// Check the length with:
//
//	len(mockedSession.GuildMemberCalls())
func (mock *SessionMock) GuildMemberCalls() []struct {
	GuildID string
	UserID  string
	Options []discordgo.RequestOption
} {
	var calls []struct {
		GuildID string
		UserID  string
		Options []discordgo.RequestOption
	}
	mock.lockGuildMember.RLock()
	calls = mock.calls.GuildMember
	mock.lockGuildMember.RUnlock()
	return calls
}

// GuildRoles calls GuildRolesFunc.
func (mock *SessionMock) GuildRoles(guildID string, options ...discordgo.RequestOption) ([]*discordgo.Role, error) {
	if mock.GuildRolesFunc == nil {
		panic("SessionMock.GuildRolesFunc: method is nil but Session.GuildRoles was just called")
	}
	callInfo := struct {
		GuildID string
		Options []discordgo.RequestOption
	}{
		GuildID: guildID,
		Options: options,
	}
	mock.lockGuildRoles.Lock()
	mock.calls.GuildRoles = append(mock.calls.GuildRoles, callInfo)
	mock.lockGuildRoles.Unlock()
	return mock.GuildRolesFunc(guildID, options...)
}

// GuildRolesCalls gets all the calls that were made to GuildRoles.
// Check the length with:
//
//	len(mockedSession.GuildRolesCalls())
func (mock *SessionMock) GuildRolesCalls() []struct {
	GuildID string
	Options []discordgo.RequestOption
} {
	var calls []struct {
		GuildID string
		Options []discordgo.RequestOption
	}
	mock.lockGuildRoles.RLock()
	calls = mock.calls.GuildRoles
	mock.lockGuildRoles.RUnlock()
	return calls
}

// UserChannelPermissions calls UserChannelPermissionsFunc.
func (mock *SessionMock) UserChannelPermissions(userID string, channelID string, fetchOptions ...discordgo.RequestOption) (int64, error) {
	if mock.UserChannelPermissionsFunc == nil {
		panic("SessionMock.UserChannelPermissionsFunc: method is nil but Session.UserChannelPermissions was just called")
	}
	callInfo := struct {
		UserID       string
		ChannelID    string
		FetchOptions []discordgo.RequestOption
	}{
		UserID:       userID,
		ChannelID:    channelID,
		FetchOptions: fetchOptions,
	}
	mock.lockUserChannelPermissions.Lock()
	mock.calls.UserChannelPermissions = append(mock.calls.UserChannelPermissions, callInfo)
	mock.lockUserChannelPermissions.Unlock()
	return mock.UserChannelPermissionsFunc(userID, channelID, fetchOptions...)
}

// UserChannelPermissionsCalls gets all the calls that were made to UserChannelPermissions.
// Check the length with:
//
//	len(mockedSession.UserChannelPermissionsCalls())
func (mock *SessionMock) UserChannelPermissionsCalls() []struct {
	UserID       string
	ChannelID    string
	FetchOptions []discordgo.RequestOption
} {
	var calls []struct {
		UserID       string
		ChannelID    string
		FetchOptions []discordgo.RequestOption
	}
	mock.lockUserChannelPermissions.RLock()
	calls = mock.calls.UserChannelPermissions
	mock.lockUserChannelPermissions.RUnlock()
	return calls
}
