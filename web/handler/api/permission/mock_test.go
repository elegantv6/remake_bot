// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package permission

import (
	"context"
	"github.com/maguro-alternative/remake_bot/web/handler/api/permission/internal"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked Repository
//		mockedRepository := &RepositoryMock{
//			DeletePermissionIDsFunc: func(ctx context.Context, guildId string) error {
//				panic("mock out the DeletePermissionIDs method")
//			},
//			InsertPermissionIDsFunc: func(ctx context.Context, permissionsID []internal.PermissionID) error {
//				panic("mock out the InsertPermissionIDs method")
//			},
//			UpdatePermissionCodesFunc: func(ctx context.Context, permissionsCode []internal.PermissionCode) error {
//				panic("mock out the UpdatePermissionCodes method")
//			},
//		}
//
//		// use mockedRepository in code that requires Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// DeletePermissionIDsFunc mocks the DeletePermissionIDs method.
	DeletePermissionIDsFunc func(ctx context.Context, guildId string) error

	// InsertPermissionIDsFunc mocks the InsertPermissionIDs method.
	InsertPermissionIDsFunc func(ctx context.Context, permissionsID []internal.PermissionID) error

	// UpdatePermissionCodesFunc mocks the UpdatePermissionCodes method.
	UpdatePermissionCodesFunc func(ctx context.Context, permissionsCode []internal.PermissionCode) error

	// calls tracks calls to the methods.
	calls struct {
		// DeletePermissionIDs holds details about calls to the DeletePermissionIDs method.
		DeletePermissionIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GuildId is the guildId argument value.
			GuildId string
		}
		// InsertPermissionIDs holds details about calls to the InsertPermissionIDs method.
		InsertPermissionIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionsID is the permissionsID argument value.
			PermissionsID []internal.PermissionID
		}
		// UpdatePermissionCodes holds details about calls to the UpdatePermissionCodes method.
		UpdatePermissionCodes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionsCode is the permissionsCode argument value.
			PermissionsCode []internal.PermissionCode
		}
	}
	lockDeletePermissionIDs   sync.RWMutex
	lockInsertPermissionIDs   sync.RWMutex
	lockUpdatePermissionCodes sync.RWMutex
}

// DeletePermissionIDs calls DeletePermissionIDsFunc.
func (mock *RepositoryMock) DeletePermissionIDs(ctx context.Context, guildId string) error {
	if mock.DeletePermissionIDsFunc == nil {
		panic("RepositoryMock.DeletePermissionIDsFunc: method is nil but Repository.DeletePermissionIDs was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		GuildId string
	}{
		Ctx:     ctx,
		GuildId: guildId,
	}
	mock.lockDeletePermissionIDs.Lock()
	mock.calls.DeletePermissionIDs = append(mock.calls.DeletePermissionIDs, callInfo)
	mock.lockDeletePermissionIDs.Unlock()
	return mock.DeletePermissionIDsFunc(ctx, guildId)
}

// DeletePermissionIDsCalls gets all the calls that were made to DeletePermissionIDs.
// Check the length with:
//
//	len(mockedRepository.DeletePermissionIDsCalls())
func (mock *RepositoryMock) DeletePermissionIDsCalls() []struct {
	Ctx     context.Context
	GuildId string
} {
	var calls []struct {
		Ctx     context.Context
		GuildId string
	}
	mock.lockDeletePermissionIDs.RLock()
	calls = mock.calls.DeletePermissionIDs
	mock.lockDeletePermissionIDs.RUnlock()
	return calls
}

// InsertPermissionIDs calls InsertPermissionIDsFunc.
func (mock *RepositoryMock) InsertPermissionIDs(ctx context.Context, permissionsID []internal.PermissionID) error {
	if mock.InsertPermissionIDsFunc == nil {
		panic("RepositoryMock.InsertPermissionIDsFunc: method is nil but Repository.InsertPermissionIDs was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		PermissionsID []internal.PermissionID
	}{
		Ctx:           ctx,
		PermissionsID: permissionsID,
	}
	mock.lockInsertPermissionIDs.Lock()
	mock.calls.InsertPermissionIDs = append(mock.calls.InsertPermissionIDs, callInfo)
	mock.lockInsertPermissionIDs.Unlock()
	return mock.InsertPermissionIDsFunc(ctx, permissionsID)
}

// InsertPermissionIDsCalls gets all the calls that were made to InsertPermissionIDs.
// Check the length with:
//
//	len(mockedRepository.InsertPermissionIDsCalls())
func (mock *RepositoryMock) InsertPermissionIDsCalls() []struct {
	Ctx           context.Context
	PermissionsID []internal.PermissionID
} {
	var calls []struct {
		Ctx           context.Context
		PermissionsID []internal.PermissionID
	}
	mock.lockInsertPermissionIDs.RLock()
	calls = mock.calls.InsertPermissionIDs
	mock.lockInsertPermissionIDs.RUnlock()
	return calls
}

// UpdatePermissionCodes calls UpdatePermissionCodesFunc.
func (mock *RepositoryMock) UpdatePermissionCodes(ctx context.Context, permissionsCode []internal.PermissionCode) error {
	if mock.UpdatePermissionCodesFunc == nil {
		panic("RepositoryMock.UpdatePermissionCodesFunc: method is nil but Repository.UpdatePermissionCodes was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		PermissionsCode []internal.PermissionCode
	}{
		Ctx:             ctx,
		PermissionsCode: permissionsCode,
	}
	mock.lockUpdatePermissionCodes.Lock()
	mock.calls.UpdatePermissionCodes = append(mock.calls.UpdatePermissionCodes, callInfo)
	mock.lockUpdatePermissionCodes.Unlock()
	return mock.UpdatePermissionCodesFunc(ctx, permissionsCode)
}

// UpdatePermissionCodesCalls gets all the calls that were made to UpdatePermissionCodes.
// Check the length with:
//
//	len(mockedRepository.UpdatePermissionCodesCalls())
func (mock *RepositoryMock) UpdatePermissionCodesCalls() []struct {
	Ctx             context.Context
	PermissionsCode []internal.PermissionCode
} {
	var calls []struct {
		Ctx             context.Context
		PermissionsCode []internal.PermissionCode
	}
	mock.lockUpdatePermissionCodes.RLock()
	calls = mock.calls.UpdatePermissionCodes
	mock.lockUpdatePermissionCodes.RUnlock()
	return calls
}
