// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package permission

import (
	"context"
	"github.com/maguro-alternative/remake_bot/web/shared/session/model"
	"net/http"
	"sync"
)

// Ensure, that OAuthStoreMock does implement OAuthStore.
// If this is not the case, regenerate this file with moq.
var _ OAuthStore = &OAuthStoreMock{}

// OAuthStoreMock is a mock implementation of OAuthStore.
//
//	func TestSomethingThatUsesOAuthStore(t *testing.T) {
//
//		// make and configure a mocked OAuthStore
//		mockedOAuthStore := &OAuthStoreMock{
//			GetDiscordOAuthFunc: func(ctx context.Context, r *http.Request) (*model.DiscordOAuthSession, error) {
//				panic("mock out the GetDiscordOAuth method")
//			},
//			GetLineOAuthFunc: func(r *http.Request) (*model.LineOAuthSession, error) {
//				panic("mock out the GetLineOAuth method")
//			},
//		}
//
//		// use mockedOAuthStore in code that requires OAuthStore
//		// and then make assertions.
//
//	}
type OAuthStoreMock struct {
	// GetDiscordOAuthFunc mocks the GetDiscordOAuth method.
	GetDiscordOAuthFunc func(ctx context.Context, r *http.Request) (*model.DiscordOAuthSession, error)

	// GetLineOAuthFunc mocks the GetLineOAuth method.
	GetLineOAuthFunc func(r *http.Request) (*model.LineOAuthSession, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetDiscordOAuth holds details about calls to the GetDiscordOAuth method.
		GetDiscordOAuth []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *http.Request
		}
		// GetLineOAuth holds details about calls to the GetLineOAuth method.
		GetLineOAuth []struct {
			// R is the r argument value.
			R *http.Request
		}
	}
	lockGetDiscordOAuth sync.RWMutex
	lockGetLineOAuth    sync.RWMutex
}

// GetDiscordOAuth calls GetDiscordOAuthFunc.
func (mock *OAuthStoreMock) GetDiscordOAuth(ctx context.Context, r *http.Request) (*model.DiscordOAuthSession, error) {
	if mock.GetDiscordOAuthFunc == nil {
		panic("OAuthStoreMock.GetDiscordOAuthFunc: method is nil but OAuthStore.GetDiscordOAuth was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   *http.Request
	}{
		Ctx: ctx,
		R:   r,
	}
	mock.lockGetDiscordOAuth.Lock()
	mock.calls.GetDiscordOAuth = append(mock.calls.GetDiscordOAuth, callInfo)
	mock.lockGetDiscordOAuth.Unlock()
	return mock.GetDiscordOAuthFunc(ctx, r)
}

// GetDiscordOAuthCalls gets all the calls that were made to GetDiscordOAuth.
// Check the length with:
//
//	len(mockedOAuthStore.GetDiscordOAuthCalls())
func (mock *OAuthStoreMock) GetDiscordOAuthCalls() []struct {
	Ctx context.Context
	R   *http.Request
} {
	var calls []struct {
		Ctx context.Context
		R   *http.Request
	}
	mock.lockGetDiscordOAuth.RLock()
	calls = mock.calls.GetDiscordOAuth
	mock.lockGetDiscordOAuth.RUnlock()
	return calls
}

// GetLineOAuth calls GetLineOAuthFunc.
func (mock *OAuthStoreMock) GetLineOAuth(r *http.Request) (*model.LineOAuthSession, error) {
	if mock.GetLineOAuthFunc == nil {
		panic("OAuthStoreMock.GetLineOAuthFunc: method is nil but OAuthStore.GetLineOAuth was just called")
	}
	callInfo := struct {
		R *http.Request
	}{
		R: r,
	}
	mock.lockGetLineOAuth.Lock()
	mock.calls.GetLineOAuth = append(mock.calls.GetLineOAuth, callInfo)
	mock.lockGetLineOAuth.Unlock()
	return mock.GetLineOAuthFunc(r)
}

// GetLineOAuthCalls gets all the calls that were made to GetLineOAuth.
// Check the length with:
//
//	len(mockedOAuthStore.GetLineOAuthCalls())
func (mock *OAuthStoreMock) GetLineOAuthCalls() []struct {
	R *http.Request
} {
	var calls []struct {
		R *http.Request
	}
	mock.lockGetLineOAuth.RLock()
	calls = mock.calls.GetLineOAuth
	mock.lockGetLineOAuth.RUnlock()
	return calls
}
